[build-system]
requires = [
    "hatchling",
#    "pyside-app-core>=0.11.0",
    "pyside-app-core @ file:///Users/leo/src/pyside-app-core",
    "hatch-vcs",
]
build-backend = "hatchling.build"

# -----------------------------------------------------------------------------
[project]
name = "odc-commander"
description = "Control the Open Dynamic Clamp Hardware"
authors = [
    { name = "Leo Covarrubias", email = "leo@leocov.com" },
]
readme = "README.md"
license-files = { paths = ["LICENSE"] }
requires-python = ">=3.12"
dependencies = [
    "pyside6>=6.7.2",
    "cobs>=1.2.1",
    "loguru",
    "pydantic",
#    "pyside-app-core>=0.11.0",
]
dynamic = ["version"]

[project.urls]
"Source" = "https://github.com/leocov-dev/odc-commander"
"Issues" = "https://github.com/leocov-dev/odc-commander/issues"
"Releases" = "https://github.com/leocov-dev/odc-commander/releases"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/odc_commander/_version.py"

[tool.hatch.metadata]
allow-direct-references = true


# -----------------------------------------------------------------------------
# build -----------------------------------------------------------------------

[tool.hatch.build.hooks.custom]
arduino-cli = true

[tool.hatch.build.hooks.pyside-app]
resource-target = "src/data"
extra-resource-roots = [
    "src/resources/odc",
]

[tool.hatch.build.targets.pyside-app]
icon = "src/resources/odc/app/icon.png"
spec-root = "src"
entrypoint = "src/ODC Commander.py"
extra-data-dirs = [
    "./data=data",
    "./vendor=vendor",
]
extra-python-packages = [
    "cobs",
    "pydantic",
]

# -----------------------------------------------------------------------------
# default ---------------------------------------------------------------------
[tool.hatch.envs.default]
dev-mode = true
type = "virtual"
path = ".venv"
post-install-commands = [
    "hatch build --ext",
    "pip install -e {root}/../pyside-app-core",  # TODO: remove localdev
]

[tool.hatch.envs.default.scripts]
odc-commander = [
    "hatch build --ext",
    "hatch run python \"src/ODC Commander.py\" {args}",
]
compile-firmware = "hatch run python -m odc_commander.arduino"

# -----------------------------------------------------------------------------
# format/linting --------------------------------------------------------------
[tool.hatch.envs.hatch-static-analysis]
dev-mode = true
skip-install = false
extra-dependencies = [
    "pyside6==6.7.*",
    "jinja2==3.*",
    "mypy>=1.10",
    "import-linter==2.*",
]

[tool.hatch.envs.hatch-static-analysis.env-vars]
PYTHONPATH = "{root}/src:{env:PYTHONPATH:}"
MYPY_CACHE_DIR = "{root}/.mypy_cache"

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = [
    'ruff format{env:HATCH_FMT_ARGS:} --check --diff {args:.}',
]
format-fix = [
    'ruff format{env:HATCH_FMT_ARGS:} {args:.}'
]
lint-check = [
    'mypy',
    'ruff check{env:HATCH_FMT_ARGS:} {args:.}',
    'lint-imports',
]
lint-fix = [
    'mypy',
    'ruff check{env:HATCH_FMT_ARGS:} --fix {args:.}',
    'lint-imports',
]

# -----------------------------------------------------------------------------
# linting ---------------------------------------------------------------------
[tool.ruff.lint]
extend-ignore = [
    "EM101",
    "EM102",
    "TRY003",
    "I001",
    "N802",
    "FBT001",
    "PLW0603",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "F401",
    "TID252",
]
"__main__.py" = [
    "T201",
]
"scripts/*" = [
    "S607",
]
"ODC Commander.py" = [
    "INP001",
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
packages = ["odc_commander"]
strict = true
implicit_reexport = true

# -----------------------------------------------------------------------------
# import linter config and rules ----------------------------------------------
[tool.importlinter]
root_packages = [
    "odc_commander",
]
include_external_packages = true
