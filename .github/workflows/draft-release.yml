name: Create Draft Release

on:
  push:
    tags:
      - "*.*.*"

jobs:

  # -------------
  release-checks:
    name: Pre-release Checks

    runs-on: ubuntu-latest

    outputs:
      TAG: ${{ steps.vars.outputs.tag }}

    steps:
      - name: Get Version Tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Version Strings
        env:
          TAG: ${{ steps.vars.outputs.tag }}
        run: pipx run hatch run scripts/validate-version.py --check-tag


  # -------------
  release-build:
    name: Build (${{ matrix.os }})
    needs: [ release-checks ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'

      - name: Release Build
        run: pipx run hatch build -t pyside-app

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "odc-commander-${{ matrix.os }}"
          path: dist


  # -------------
  release-draft:
    name: Create Draft Release
    needs: [ release-checks, release-build ]

    permissions:
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          pattern: odc-commander-*
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R dist/

      - name: Draft Release
        uses: release-drafter/release-drafter@v5
        with:
          tag: ${{ needs.release-checks.outputs.TAG }}
          version: ${{ needs.release-checks.outputs.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload --clobber ${{ needs.release-checks.outputs.TAG }} dist/*
